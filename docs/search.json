[{"path":"https://your-github-username.github.io/mimicR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jules. Maintainer.","code":""},{"path":"https://your-github-username.github.io/mimicR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jules (2025). mimicR: R Interface mimic C++ Functions. R package version 0.1.0.","code":"@Manual{,   title = {mimicR: R Interface to mimic C++ Functions},   author = {{Jules}},   year = {2025},   note = {R package version 0.1.0}, }"},{"path":"https://your-github-username.github.io/mimicR/index.html","id":"mimicr-r-interface-for-peptide-mimicking","dir":"","previous_headings":"","what":"R Interface to mimic C++ Functions","title":"R Interface to mimic C++ Functions","text":"mimicR R package provides interface C++ functions generating mimic (e.g., shuffled) peptide sequences FASTA files. often useful bioinformatics, example, creating decoy databases proteomics analysis.","code":""},{"path":"https://your-github-username.github.io/mimicR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R Interface to mimic C++ Functions","text":"can install development version mimicR GitHub using devtools: Alternatively, can clone repository build package locally:","code":"# install.packages(\"devtools\") # If you don't have devtools installed devtools::install_github(\"YOUR_GITHUB_USERNAME/mimicR\") # Replace with the actual path once known git clone https://github.com/YOUR_GITHUB_USERNAME/mimicR.git # Replace with actual path R CMD build mimicR R CMD INSTALL mimicR_<version>.tar.gz # Replace <version> with the actual version"},{"path":"https://your-github-username.github.io/mimicR/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"R Interface to mimic C++ Functions","text":"core function package mimic_fasta(). ’s basic example:","code":"# Ensure the package is loaded # library(mimicR) # Not strictly necessary if using ::  # Create a dummy FASTA file for demonstration dummy_fasta_content <- c(\">seq1_original\", \"PEPTIDE\", \">seq2_another\", \"SEQUENCE\") dummy_input_path <- tempfile(fileext = \".fasta\") dummy_output_path <- tempfile(fileext = \".fasta\") writeLines(dummy_fasta_content, dummy_input_path)  # Generate mimic peptides success <- mimicR::mimic_fasta(   input_fasta_path = dummy_input_path,   output_fasta_path = dummy_output_path,   num_shuffles = 3,      # Generate 3 shuffled versions per original peptide   replace_i = TRUE,      # Replace Isoleucine (I) with Leucine (L)   prepend_original = TRUE # Include the original sequence in the output )  if (success && file.exists(dummy_output_path)) {   print(paste(\"Output successfully generated at:\", dummy_output_path))   # You can then read and inspect the output FASTA file   # output_content <- readLines(dummy_output_path)   # print(output_content) } else {   print(\"Mimic peptide generation failed or output file not found.\") }  # Clean up dummy files if (file.exists(dummy_input_path)) file.remove(dummy_input_path) if (file.exists(dummy_output_path)) file.remove(dummy_output_path)"},{"path":"https://your-github-username.github.io/mimicR/index.html","id":"key-features--options","dir":"","previous_headings":"","what":"Key Features & Options","title":"R Interface to mimic C++ Functions","text":"mimic_fasta() function offers several parameters control peptide generation: input_fasta_path: Path input FASTA file. output_fasta_path: Path generated output FASTA file. min_len: Minimum length peptides process. num_shuffles: Number mimic sequences generate per original peptide. replace_i: Whether replace Isoleucine () residues Leucine (L). seed: Seed random number generator reproducible results. protein_name_prefix: Prefix names mimic proteins output FASTA. shared_peptide_ratio: Ratio shared peptides (details depend C++ implementation). prepend_original: TRUE, original peptide sequence included output along mimics. infer_aa_frequency: TRUE, infers amino acid frequencies input file shuffling. verbose: Enable verbose output underlying C++ code.","code":""},{"path":"https://your-github-username.github.io/mimicR/index.html","id":"vignette","dir":"","previous_headings":"","what":"Vignette","title":"R Interface to mimic C++ Functions","text":"detailed guide advanced usage examples, please see package vignette: (Note: Vignette available package building vignette generation enabled.)","code":"# Build vignettes if installing from source or GitHub # devtools::install(build_vignettes = TRUE) # if you installed with devtools # browseVignettes(\"mimicR\")"},{"path":"https://your-github-username.github.io/mimicR/index.html","id":"building-from-source","dir":"","previous_headings":"","what":"Building from Source","title":"R Interface to mimic C++ Functions","text":"cloned repository, can build package using standard R commands: Ensure R development tools installed (Rtools Windows, Xcode command-line tools macOS, r-base-dev Linux). Navigate package directory terminal. Run R CMD build . R CMD INSTALL mimicR_<version>.tar.gz (replacing <version> actual version number built package). include vignettes building source: R CMD build ---manual ---resave-data . followed install command. ensure VignetteBuilder: knitr DESCRIPTION file build appropriately.","code":""},{"path":"https://your-github-username.github.io/mimicR/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"R Interface to mimic C++ Functions","text":"package licensed Apache License 2.0. See DESCRIPTION file details. ```","code":""},{"path":"https://your-github-username.github.io/mimicR/reference/mimicR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"mimicR: R Interface to mimic C++ Functions — mimicR-package","title":"mimicR: R Interface to mimic C++ Functions — mimicR-package","text":"Provides R interface C++ peptide mimic functions.","code":""},{"path":"https://your-github-username.github.io/mimicR/reference/mimic_fasta.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Mimic Peptides from a FASTA File — mimic_fasta","title":"Generate Mimic Peptides from a FASTA File — mimic_fasta","text":"function takes input FASTA file generates new FASTA file containing mimic (e.g., shuffled) peptides based original sequences. serves R interface underlying C++ 'mimic' logic.","code":""},{"path":"https://your-github-username.github.io/mimicR/reference/mimic_fasta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Mimic Peptides from a FASTA File — mimic_fasta","text":"","code":"mimic_fasta(   input_fasta_path,   output_fasta_path,   min_len = 0,   num_shuffles = 1,   replace_i = FALSE,   seed = 0,   protein_name_prefix = \"mimic|Random\",   shared_peptide_ratio = 0,   prepend_original = FALSE,   infer_aa_frequency = TRUE,   verbose = FALSE )"},{"path":"https://your-github-username.github.io/mimicR/reference/mimic_fasta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Mimic Peptides from a FASTA File — mimic_fasta","text":"input_fasta_path Path input FASTA file. output_fasta_path Path output FASTA file. min_len Unsigned integer, minimum length peptides consider. Corresponds C++ '-l' option. num_shuffles Unsigned integer, number shuffles per original peptide. Corresponds C++ '-m' (multFactor) option. replace_i Logical, whether replace Isoleucine () Leucine (L). Corresponds C++ '-' option. seed Unsigned integer, seed random number generator. 0 may indicate using random seed. Corresponds C++ '-s' option. protein_name_prefix String, prefix protein names output FASTA. Corresponds C++ '-p' option. shared_peptide_ratio Double, ratio shared peptides. Corresponds C++ '-q' option. prepend_original Logical, whether prepend original peptide sequence output. Corresponds C++ '-P' option. infer_aa_frequency Logical, whether infer amino acid frequencies input file. Corresponds C++ '-' option. verbose Logical, enable verbose output C++ execution. Corresponds C++ '-v' option.","code":""},{"path":"https://your-github-username.github.io/mimicR/reference/mimic_fasta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Mimic Peptides from a FASTA File — mimic_fasta","text":"Logical `TRUE` successful output file created, `FALSE` otherwise.","code":""},{"path":"https://your-github-username.github.io/mimicR/reference/mimic_fasta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Mimic Peptides from a FASTA File — mimic_fasta","text":"","code":"if (FALSE) { # \\dontrun{   # Create a dummy FASTA file   dummy_fasta_content <- c(\">seq1\", \"ACGT\", \">seq2\", \"TGCA\")   dummy_input_path <- tempfile(fileext = \".fasta\")   dummy_output_path <- tempfile(fileext = \".fasta\")   writeLines(dummy_fasta_content, dummy_input_path)    success <- mimic_fasta(     input_fasta_path = dummy_input_path,     output_fasta_path = dummy_output_path,     num_shuffles = 2   )    if (success && file.exists(dummy_output_path)) {     print(paste(\"Output successfully generated at:\", dummy_output_path))   } else {     print(\"Mimic peptide generation failed or output file not found.\")   }    if (file.exists(dummy_input_path)) file.remove(dummy_input_path)   if (file.exists(dummy_output_path)) file.remove(dummy_output_path) } # }"}]
